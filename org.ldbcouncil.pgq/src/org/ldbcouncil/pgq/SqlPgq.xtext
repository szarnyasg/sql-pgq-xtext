grammar org.ldbcouncil.pgq.SqlPgq with org.eclipse.xtext.common.Terminals

generate sqlPgq "http://www.ldbcouncil.org/pgq/SqlPgq"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Query:
	(SelectQuery | CreatePropertyGraph)
	';'?
	;

SelectQuery:
	'SELECT'
	'FROM' GraphTable
;


// FROM GRAPH_TABLE

GraphTable:
	'GRAPH_TABLE'
	'('
		ID ',' GraphPattern
		'COLUMNS' '(' GraphTableColumnDefinitionList ')'
	')'
	;


GraphTableColumnDefinitionList:
	GraphTableColumnDefinition (',' GraphTableColumnDefinition)*;

GraphTableColumnDefinition:
	ID ('AS' ID)?;




GraphPattern:
	'MATCH' PathPatternList
//	GraphPatternWhereClauseOptional
	;

//GraphPatternWhereClauseOptional:
//	'WHERE' a_expr
//	;

PathPatternList:
	(PathPatternNameOptional PathConcatenation)+;

//Identifier is a Path Name.
PathPatternNameOptional:
	(ID 'AS')?;

PathConcatenation:
	ElementPattern+;

ElementPattern:
	VertexPattern | EdgePattern;

VertexPattern:
	'(' GraphPatternVariableDeclaration? IsLabelExpression?')';

IsLabelExpression:
	IsOrColon ID?;

EdgePatternFiller:
	GraphPatternVariableDeclaration? IsLabelExpression?

;

MandatoryEdgePatternFiller:
	GraphPatternVariableDeclaration IsLabelExpression?
	| IsLabelExpression
	;

GraphPatternVariableDeclaration:
	ID;

EdgePattern:
	FullEdgePattern
	| AbbreviatedEdgePattern
	;

FullEdgePattern:
	FullEdgePointingRight
	| FullEdgePointingLeft
	| FullEdgeAnyDirection
	;

FullEdgePointingRight:
	'-[' EdgePatternFiller ']->'
	| '-' MandatoryEdgePatternFiller '->'
	;

FullEdgePointingLeft:
	'<-[' EdgePatternFiller ']-'
	| '<-' MandatoryEdgePatternFiller '-'
	;

FullEdgeAnyDirection:
	'-[' EdgePatternFiller ']-'
	| '-' MandatoryEdgePatternFiller '-'
	;

AbbreviatedEdgePattern:
	'->' | '<-'	| '-';




// CREATE PROPERTY GRAPH

CreatePropertyGraph:
	'CREATE' 'PROPERTY' 'GRAPH' name=ID PropertyGraphContent;

// [!] Change: We require the VertexTablesClause to be filled
PropertyGraphContent:
	VertexTablesClause EdgeTablesClause?;

VertexTablesClause:
	Vertex 'TABLES' '(' VertexTableDefinitionList ')';

VertexTableDefinitionList:
	VertexTableDefinition (',' VertexTableDefinition)*;

VertexTableDefinition:
	ID
	GraphTableKeyClause
	// [!] Change: they PROPERTIES keyword is not supported (the expected behaviour as is all properties were enumerated)
	LabelList;

EdgeTablesClause:
	Edge 'TABLES' '(' EdgeTableDefinitionList ')';

EdgeTableDefinitionList:
	EdgeTableDefinition (',' EdgeTableDefinition)*;

EdgeTableDefinition:
	ID
	// [!] Change: We require the 'KEY' to be defined
	GraphTableKeyClause
	SourceVertexTable
	DestinationVertexTable
	LabelList
	;

SourceVertexTable:
	'SOURCE' GraphTableKeyClause 'REFERENCES' ID
	;

DestinationVertexTable:
	'DESTINATION' GraphTableKeyClause 'REFERENCES' ID
	;

// [!] Change: <column name list> is undefined in the original document
GraphTableKeyClause:
	'KEY' '(' ID (',' ID)* ')';

// [!] Change: In SQL/PGQ, only a single label is allowed
LabelList:
	('LABEL' ID)+ | 'LABEL' 'DEFAULT';

// aliases
Vertex: 'VERTEX' | 'NODE';
Edge: 'EDGE' | 'RELATIONSHIP';
IsOrColon: 'IS' | ':';


//SYMBOLIC_NAME_X:
//	ID | 'CYPHER' | 'EXPLAIN' | 'PROFILE' | 'USING' | 'PERIODIC' | 'COMMIT' | 'UNION' | 'ALL' | 'CREATE' | 'INDEX' | 'ON'
//	| 'DROP' | 'CONSTRAINT' | 'ASSERT' | 'IS' | 'UNIQUE' | 'EXISTS' | 'LOAD' | 'CSV' | 'WITH' | 'HEADERS' | 'FROM' | 'AS'
//	| 'FIELDTERMINATOR' | 'OPTIONAL' | 'MATCH' | 'UNWIND' | 'MERGE' | 'SET' | 'DELETE' | 'DETACH' | 'REMOVE' | 'FOREACH'
//	| 'IN' | 'DISTINCT' | 'RETURN' | 'ORDER' | 'BY' | 'SKIP' | 'LIMIT' | 'DESCENDING' | 'DESC' | 'ASCENDING' | 'ASC' |
//	'JOIN' | 'SCAN' | 'START' | 'NODE' | 'RELATIONSHIP' | 'REL' | 'WHERE' | 'SHORTESTPATH' | 'ALLSHORTESTPATHS' | 'OR' |
//	'XOR' | 'AND' | 'NOT' | 'STARTS' | 'ENDS' | 'CONTAINS' | 'NULL' | 'TRUE' | 'FALSE' | 'COUNT' | 'FILTER' | 'EXTRACT' |
//	'ANY' | 'NONE' | 'SINGLE' | 'REDUCE' | 'CASE' | 'ELSE' | 'END' | 'WHEN' | 'THEN';

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | ('`'->'`');

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal STRING_LITERAL:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' | "'" ('\\' .
	/* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

terminal HEX:
	('0x' | '0X') ('0'..'9' | 'A'..'F')+;

terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9')*;

terminal DECIMAL:
	INT (('e') ('+' | '-')? INT)?;
	
