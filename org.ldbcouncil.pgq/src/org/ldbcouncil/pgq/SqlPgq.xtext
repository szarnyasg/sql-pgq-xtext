grammar org.ldbcouncil.pgq.SqlPgq with org.eclipse.xtext.common.Terminals

generate sqlPgq "http://www.ldbcouncil.org/pgq/SqlPgq"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Comments on the spec:
// - <vertical bar>, <ampersand>, <exclamation mark>, <comma>, etc. are not defined
// - syntax for DIFFERENT EDGES, WALK, etc. is missing
// - angle bracket missing?

Query:
	(SelectQuery | CreatePropertyGraph)
	';'?
	;

SelectQuery:
	'SELECT'
	'FROM' GraphTable
;

// ----------------------------------------------------------------------
//                              GRAPH_TABLE
// ----------------------------------------------------------------------

GraphTable:
	'GRAPH_TABLE'
	'('
		ID ',' GraphPattern
		'COLUMNS' '(' GraphTableColumnDefinitionList ')'
	')'
	;

GraphTableColumnDefinitionList:
	GraphTableColumnDefinition (',' GraphTableColumnDefinition)*;

GraphTableColumnDefinition:
	ID ('AS' ID)?;

GraphPattern:
	'MATCH' PathPatternList
	('WHERE')? // optional WHERE CLAUSE, incomplete in the current grammar
	;

ParenthesizedPathPatternExpression:
	  '(' PathPatternExpression ParenthesizedPathPatternWhereClause? ')'
	| '[' PathPatternExpression ParenthesizedPathPatternWhereClause? ']'
	;

ParenthesizedPathPatternWhereClause:
	'WHERE'; // <search condition>

PathPatternList:
	PathPattern (',' PathPattern)*;

PathPattern:
	(ID 'AS')? PathPatternExpression;


// Rewritten to avoid ANTLR errors. Was originally:
//
// <path pattern expression> ::=
//     <path term>
//   | <path multiset alternation>
//   | <path set disjunction>
PathPatternExpression:
	PathTerm
	(PathMultisetAlternation | PathSetDisjunction)?
	;

PathMultisetAlternation:
	('|+|' PathTerm)+;

PathSetDisjunction:
	('|' PathTerm)+;

// eliminate left recursion from PathTerm and PathConcatenation:
PathTerm:
	PathFactor+;

// collapse QuantifiedPathPrimary rule into PathFactor 
PathFactor:
	PathPrimary GraphPatternQuantifier?;

PathPrimary:
	  ElementPattern
	| ParenthesizedPathPatternExpression;

ElementPattern:
	  VertexPattern
	| EdgePattern;

VertexPattern:
	'(' GraphPatternVariableDeclaration? IsLabelExpression?')';

IsLabelExpression:
	IsOrColon ID?;

EdgePatternFiller:
	GraphPatternVariableDeclaration? IsLabelExpression?
;

MandatoryEdgePatternFiller:
	  GraphPatternVariableDeclaration IsLabelExpression?
	| IsLabelExpression
	;

GraphPatternVariableDeclaration:
	ID;

EdgePattern:
	  FullEdgePattern
	| AbbreviatedEdgePattern
	;

FullEdgePattern:
	  FullEdgePointingRight
	| FullEdgePointingLeft
	| FullEdgeAnyDirection
	;

FullEdgePointingRight:
	  '-[' EdgePatternFiller ']->'
	| '-' MandatoryEdgePatternFiller '->'
	;

FullEdgePointingLeft:
	  '<-[' EdgePatternFiller ']-'
	| '<-' MandatoryEdgePatternFiller '-'
	;

FullEdgeAnyDirection:
	  '-[' EdgePatternFiller ']-'
	| '-' MandatoryEdgePatternFiller '-'
	;

AbbreviatedEdgePattern:
	'->' | '<-'	| '-';

GraphPatternQuantifier:
	  '*'
	| '+'
	| '?'
	| FixedQuantifier
	| GeneralQuantifier
	;

FixedQuantifier:
	'{' INT '}';

GeneralQuantifier:
	'{' INT? ',' INT? '}';

// ----------------------------------------------------------------------
//                        CREATE PROPERTY GRAPH
// ----------------------------------------------------------------------

CreatePropertyGraph:
	'CREATE' 'PROPERTY' 'GRAPH' name=ID PropertyGraphContent;

// [!] Change: We require the VertexTablesClause to be filled
PropertyGraphContent:
	VertexTablesClause EdgeTablesClause?;

VertexTablesClause:
	Vertex 'TABLES' '(' VertexTableDefinitionList ')';

VertexTableDefinitionList:
	VertexTableDefinition (',' VertexTableDefinition)*;

VertexTableDefinition:
	ID
	GraphTableKeyClause
	// [!] Change: they PROPERTIES keyword is not supported (the expected behaviour as is all properties were enumerated)
	LabelList;

EdgeTablesClause:
	Edge 'TABLES' '(' EdgeTableDefinitionList ')';

EdgeTableDefinitionList:
	EdgeTableDefinition (',' EdgeTableDefinition)*;

EdgeTableDefinition:
	ID
	// [!] Change: We require the 'KEY' to be defined
	GraphTableKeyClause
	SourceVertexTable
	DestinationVertexTable
	LabelList
	;

SourceVertexTable:
	'SOURCE' GraphTableKeyClause 'REFERENCES' ID
	;

DestinationVertexTable:
	'DESTINATION' GraphTableKeyClause 'REFERENCES' ID
	;

// [!] Change: <column name list> is undefined in the original document
GraphTableKeyClause:
	'KEY' '(' ID (',' ID)* ')';

// [!] Change: In SQL/PGQ, only a single label is allowed
LabelList:
	('LABEL' ID)+ | 'LABEL' 'DEFAULT';

// ----------------------------------------------------------------------
//                                aliases  
// ----------------------------------------------------------------------

Vertex: 'VERTEX' | 'NODE';
Edge: 'EDGE' | 'RELATIONSHIP';
IsOrColon: 'IS' | ':';

// ----------------------------------------------------------------------
//                            terminal symbols
// ----------------------------------------------------------------------

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | ('`'->'`');

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal STRING_LITERAL:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' | "'" ('\\' .
	/* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

terminal HEX:
	('0x' | '0X') ('0'..'9' | 'A'..'F')+;

terminal INT returns ecore::EInt:
	'0'..'9'+;

terminal DECIMAL:
	INT (('e') ('+' | '-')? INT)?;
